import { test, expect, chromium } from '@playwright/test';

test.describe('–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ 6: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API + UI –∑ –º–æ–∫–∞–ø–∞–º–∏', () => {
  // --- 1. –ú–æ–∫–∞–ø SMS API ---
  test('–£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ SMS', async ({ page }) => {
    await page.route('**/api/sms/send', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({ message: 'SMS sent successfully' }),
      });
    });

    await page.goto('https://demoqa.com/books');
    // –¢—É—Ç –º–∞–ª–æ –± –±—É—Ç–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏, —è–∫–∞ —Ç—Ä–∏–≥–µ—Ä–∏—Ç—å SMS
    console.log(' –ú–æ–∫–∞–ø SMS –∑ –∫–æ–¥–æ–º 200 –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤');
  });

  test('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ SMS (500)', async ({ page }) => {
    await page.route('**/api/sms/send', async (route) => {
      await route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ error: 'Internal Server Error' }),
      });
    });

    await page.goto('https://demoqa.com/books');
    console.log(' –ú–æ–∫–∞–ø SMS –∑ –ø–æ–º–∏–ª–∫–æ—é 500 –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤');
  });

  test('–¢–∞–π–º–∞—É—Ç SMS —Å–µ—Ä–≤—ñ—Å—É', async ({ page }) => {
    await page.route('**/api/sms/send', async (route) => {
      await new Promise((res) => setTimeout(res, 6000));
      await route.abort(); // –Ü–º—ñ—Ç–∞—Ü—ñ—è –æ–±—Ä–∏–≤—É
    });

    await page.goto('https://demoqa.com/books');
    console.log('‚è± –ú–æ–∫–∞–ø —Ç–∞–π–º–∞—É—Ç—É SMS API –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞–≤');
  });

  // --- 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ UI —Ç–∞ –º–æ–∫–∞–ø SMS ---
  test('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ + –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è SMS', async ({ page }) => {
    await page.route('**/api/sms/send', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({ message: 'SMS sent successfully' }),
      });
    });

    await page.goto('https://demoqa.com/register');

    await page.fill('#firstname', 'Test');
    await page.fill('#lastname', 'User');
    await page.fill('#userName', 'testuser123');
    await page.fill('#password', 'Pass123!');
    await page.click('#register');

    // –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ä–µ–∞–∫—Ü—ñ—è ‚Äî –º–æ–∂–µ—à –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥ —Å–≤—ñ–π UI
    console.log(' –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ—ó —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ —É—Å–ø—ñ—à–Ω—É SMS-–≤—ñ–¥–ø—Ä–∞–≤–∫—É');
  });

  // --- 3. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
  test('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏ (localStorage)', async () => {
    const browser = await chromium.launch();
    const context = await browser.newContext();
    const page1 = await context.newPage();
    const page2 = await context.newPage();

    await page1.goto('https://demoqa.com/books');
    await page2.goto('https://demoqa.com/books');

    await page1.evaluate(() => {
      localStorage.setItem('testItem', JSON.stringify({ key: 'value' }));
      window.dispatchEvent(new Event('storage'));
    });

    const isSynced = await page2.evaluate(() => {
      const item = localStorage.getItem('testItem');
      return item !== null && JSON.parse(item).key === 'value';
    });

    expect(isSynced).toBeTruthy();
    console.log('üîÑ –î–∞–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏');

    await browser.close();
  });

  // --- 4. –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ API ---
  test('UI –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ API', async ({ page }) => {
    await page.route('**/BookStore/v1/Books', async (route) => {
      await route.fulfill({
        status: 200,
        contentType: 'application/json',
        body: JSON.stringify({
          books: [{ title: '–ù–æ–≤–∏–Ω–∫–∞ –∑ API', isbn: '000-NEW' }],
        }),
      });
    });

    await page.goto('https://demoqa.com/books');

    const found = await page.locator('.rt-td').filter({ hasText: '–ù–æ–≤–∏–Ω–∫–∞ –∑ API' }).isVisible();
    expect(found).toBeTruthy();
    console.log(' UI –æ–Ω–æ–≤–∏–≤—Å—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ');
  });

  // --- 5. –†–µ–∞–ª—Ç–∞–π–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ---
  test('Real-time –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏', async () => {
    const browser = await chromium.launch();
    const context = await browser.newContext();
    const page1 = await context.newPage();
    const page2 = await context.newPage();

    await page1.goto('https://demoqa.com/books');
    await page2.goto('https://demoqa.com/books');

    await page1.evaluate(() => {
      localStorage.setItem('books', JSON.stringify([{ title: 'RealTime Book', isbn: '111' }]));
      window.dispatchEvent(new Event('storage'));
    });

    const synced = await page2.evaluate(() => {
      const books = JSON.parse(localStorage.getItem('books') || '[]');
      return books.length > 0 && books[0].title === 'RealTime Book';
    });

    expect(synced).toBeTruthy();
    console.log(' –î–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –æ–Ω–æ–≤–ª–µ–Ω—ñ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏');

    await browser.close();
  });
});